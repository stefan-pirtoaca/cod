CREATE TABLE Products (
	productID 	integer NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),
    	product_name 	varchar(255) NOT NULL UNIQUE,
    	product_description varchar(255) NOT NULL,
    	price 		integer NOT NULL,
    	quantity 	integer NOT NULL,
    	product_type 	varchar(20) NOT NULL,
    	isAvailable	boolean NOT NULL,
    	intendedDuration integer NOT NULL,
    	PRIMARY KEY (productID));

CREATE TABLE Payments (
	paymentID 	integer NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),
	customerI	integer NOT NULL,
	amount 		float(10) NOT NULL,
	payment_date 	date NOT NULL,
	payment_time 	time NOT NULL,	
	isRefund 	boolean DEFAULT false NOT NULL,
	PRIMARY KEY (paymentID));

CREATE TABLE Bank_Payment (
	paymentID 	integer NOT NULL UNIQUE,
	account_name 	varchar(255) NOT NULL,
	account_number 	char(10) NOT NULL,
	sort_code 	char(8) NOT NULL);

CREATE TABLE Card_Payment (
	paymentID 	integer NOT NULL UNIQUE,
	card_type 	varchar(20) NOT NULL,
	card_number 	char(16) NOT NULL,
	cardholder_name varchar(255) NOT NULL,
	expiration_date date NOT NULL,
	security_code 	char(3) NOT NULL);

CREATE TABLE Orders (
    	orderID 	integer NOT NULL GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),
    	customerID 	integer NOT NULL,
    	order_type(30) 	varchar NOT NULL,
    	order_date 	date DEFAULT CURRENT_DATE NOT NULL,
    	order_time 	time DEFAULT CURRENT_TIME NOT NULL,
    	priority 	boolean DEFAULT false NOT NULL,
    	completed 	boolean DEFAULT false NOT NULL,
    	preparation_time integer NOT NULL,
    	employeeID 	integer NOT NULL,
    	paymentID 	integer NOT NULL,
    	PRIMARY KEY (orderID));

CREATE TABLE Discounts (
	discountID 	integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),
	cutsomerID 	integer NOT NULL,
	discount_type 	integer NOT NULL,
	discount_percentage integer NOT NULL,
	PRIMARY KEY (discountID));

CREATE TABLE Order_Contents (
	orderID 	integer NOT NULL,
	productID 	integer NOT NULL);

CREATE TABLE Refunds (
  	paymentID 	integer NOT NULL UNIQUE, 
  	managerID 	integer NOT NULL, 
  	timestamp 	timestamp NOT NULL);

CREATE TABLE Customers (
  	customerID      integer NOT NULL, 
  	amount_spent    float(10) DEFAULT 0.0 NOT NULL, 
  	date_registered date DEFAULT CURRENT_DATE NOT NULL, 
  	vip_status      integer DEFAULT 0 NOT NULL, 
  	mobile_number   varchar(11), 
  	PRIMARY KEY (customerID));

CREATE TABLE Employees (
  	employeeID 	integer NOT NULL, 
  	salary     	integer DEFAULT 15000 NOT NULL, 
  	PRIMARY KEY (employeeID));

CREATE TABLE Users (
  	userID     	integer NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), 
  	type       	varchar(20) NOT NULL, 
  	name       	varchar(64) NOT NULL, 
  	surname    	varchar(64) NOT NULL, 
  	email      	varchar(255) NOT NULL UNIQUE, 
  	password   	varchar(255) NOT NULL, 
  	isLoggedIn 	boolean DEFAULT false NOT NULL,
  	last_login 	timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
  	PRIMARY KEY (userID));

ALTER TABLE Customers ADD CONSTRAINT CustomerIsKindOf FOREIGN KEY (customerID) REFERENCES Users (userID);
ALTER TABLE Employees ADD CONSTRAINT EmployeeIsKindOf FOREIGN KEY (employeeID) REFERENCES Users (userID);
ALTER TABLE Refunds ADD CONSTRAINT Can_authorise FOREIGN KEY (managerID) REFERENCES Employees (employeeID);
ALTER TABLE Refunds ADD CONSTRAINT Can_be FOREIGN KEY (paymentID) REFERENCES Payments (paymentID);
ALTER TABLE Discounts ADD CONSTRAINT Can_have FOREIGN KEY (cutsomerID) REFERENCES Customers (customerID);
ALTER TABLE Orders ADD CONSTRAINT Places FOREIGN KEY (customerID) REFERENCES Customers (customerID);
ALTER TABLE Payments ADD CONSTRAINT Makes FOREIGN KEY (customerID) REFERENCES Customers (customerID);
ALTER TABLE Orders ADD CONSTRAINT Processes FOREIGN KEY (employeeID) REFERENCES Employees (employeeID);
ALTER TABLE Orders ADD CONSTRAINT Refers_to FOREIGN KEY (paymentID) REFERENCES Payments (paymentID);
ALTER TABLE Order_Contents ADD CONSTRAINT "Contains" FOREIGN KEY (orderID) REFERENCES Orders (orderID);
ALTER TABLE Products ADD CONSTRAINT "Are in" FOREIGN KEY (productID) REFERENCES Order_Contents (productID);
ALTER TABLE Bank_Payment ADD CONSTRAINT bank_pay_refers_to FOREIGN KEY (paymentID) REFERENCES Payments (paymentID);
ALTER TABLE Card_Payment ADD CONSTRAINT card_pay_refers_to FOREIGN KEY (paymentID) REFERENCES Payments (paymentID);
